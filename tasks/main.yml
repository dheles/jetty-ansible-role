---

- name: get java version
  shell: "java -version 2>&1"
  register: java_version_result
  changed_when: false

- name: test java version
  fail:
      msg: "jetty requires java version {{ java_version }} or higher"
  when: "'{{ java_version }}' not in java_version_result.stdout"

- name: add jetty group
  group:
    name: "{{ jetty_group }}"
    gid:  "{{ jetty_group_gid | default(omit) }}"
    state: present
  become: true

- name: add jetty user
  user:
    name: "{{ jetty_user }}"
    shell: "/bin/bash"
    uid:    "{{ jetty_user_uid  | default(omit) }}"
    group:  "{{ jetty_group  }}"
  become: true

# NOTE: remove filename (or anything else) if it is included after the checksum
- name: get jetty checksum
  set_fact:
    jetty_checksum: "{{ item | regex_replace('\\s+.*', '') }}"
  with_url: "{{ jetty_checksum_url }}"

- name: get jetty
  get_url:
    url:      "{{ jetty_url }}"
    dest:     "{{ jetty_download_dir }}"
    checksum: "{{ jetty_checksum_algorithm }}:{{ jetty_checksum }}"
  register: got_jetty

- name: exract jetty
  unarchive:
    src:        "{{ jetty_download_dir }}/{{ jetty_download_file }}"
    dest:       "{{ jetty_install_dir }}"
    owner:      "{{ jetty_user }}"
    group:      "{{ jetty_group }}"
    remote_src: yes
  become: true
  when: got_jetty.changed

- name: symlink jetty
  file:
    src:    "{{ jetty_install_dir }}/{{ jetty_dir }}"
    dest:   "{{ jetty_home }}"
    state:  link
  become: true

- name: make sure jetty base exists
  file:
    path: "{{ jetty_base }}"
    owner: "{{ jetty_user }}" # "{{ ansible_env.USER }}"
    group: "{{ jetty_group }}" # "{{ ansible_env.USER }}"
    state: directory
    recurse: true
  become: true

# necessary, with environment vars set by the service configuration?
- name: set jetty home environment var
  lineinfile:
    dest:   "/etc/profile.d/jetty.sh"
    regexp: "^export JETTY_HOME="
    line:   "export JETTY_HOME={{ jetty_home }}"
    state:  present
    create: yes
  become: true

- name: set jetty base environment var
  lineinfile:
    dest:   "/etc/profile.d/jetty.sh"
    regexp: "^export JETTY_BASE="
    line:   "export JETTY_BASE={{ jetty_base }}"
    state:  present
    create: yes
  become: true

- name: test jetty with demo-base
  shell: "cp -R {{ jetty_home }}/demo-base/* {{ jetty_base }}"
  become: true
  become_user:  "{{ jetty_user }}"
  when: jetty_test

- block:
  - name: create jetty start.d
    command: "java -jar {{ jetty_home }}/start.jar --create-startd"
    register: startd_result
    args:
      chdir: "{{ jetty_base }}"
    changed_when: "'Base directory was modified' in startd_result.stdout"

  - name: add jetty modules
    command: "java -jar {{ jetty_home }}/start.jar --add-to-start={{ jetty_modules }}"
    register: modules_result
    args:
      chdir: "{{ jetty_base }}"
    become: true
    become_user:  "{{ jetty_user }}"
    changed_when: "'Base directory was modified' in modules_result.stdout"
  when: not jetty_test

- name: create jetty service directory for additional configuration
  file:
    path: "/etc/systemd/system/jetty.service.d"
    state: directory
  become: true

- name: set jetty service vars
  template:
    src: "jetty.conf.j2"
    dest: "/etc/systemd/system/jetty.service.d/jetty.conf"
  become: true
  notify: restart jetty

- name: configure jetty service
  template:
    src: "jetty.service.j2"
    dest: "/etc/systemd/system/jetty.service"
  become: true
  notify: restart jetty

- name: flush handlers after configuring
  meta: flush_handlers

- name: wait for jetty to start
  wait_for:
    port: "{{ jetty_port }}"

- name: check if jetty service is running
  command: systemctl is-active jetty
  register: jetty_status
  failed_when: "'active' not in jetty_status.stdout"
  changed_when: false
